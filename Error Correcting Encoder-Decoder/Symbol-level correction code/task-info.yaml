type: edu
custom_name: stage2
files:
- name: src/correcter/Main.java
  visible: true
  text: "package correcter;\nimport java.util.*;\npublic class Main {\n    public\
    \ static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n\
    \        String str = scanner.nextLine();\n\n        String alphabet = \"0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ?/.,\"\
    ;\n        Random random = new Random();\n        Random random_pos = new Random();\n\
    \        String new_str = \"\";\n        String three_str = \"\";\n        int\
    \ idx = 3;\n        char[] strToArray = new char[idx];\n        for (int i = 1;\
    \ i < str.length(); i++) {\n            if ((i + 1) % idx == 0) {\n          \
    \      //System.out.println(\"i = \" + i);\n                three_str = String.valueOf(str.charAt(i\
    \ - 2)) + str.charAt(i - 1) + str.charAt(i);\n                strToArray = three_str.toCharArray();\n\
    \                strToArray[random_pos.nextInt(idx)] = alphabet.charAt(random.nextInt(alphabet.length()-1));\n\
    \                three_str = String.valueOf(strToArray[0]) + strToArray[1] + strToArray[2];\n\
    \                new_str += three_str;\n                \n                if (str.length()\
    \ - new_str.length() < idx) {\n                    new_str += str.substring(i\
    \ + 1,str.length());\n                    break;\n                }\n        \
    \    }\n        }\n        System.out.println(new_str);\n    }\n}\n"
  learner_created: false
- name: test/CorrecterTest.java
  visible: false
  text: |
    import correcter.Main;

    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.TestCase;

    import java.util.ArrayList;
    import java.util.Arrays;
    import java.util.List;

    class TestClue {
        String input;

        TestClue(String input) {
            this.input = input;
        }
    }

    public class CorrecterTest extends StageTest<TestClue> {

        public CorrecterTest() throws Exception {
            super(Main.class);
        }

        @Override
        public List<TestCase<TestClue>> generate() {
            TestClue[] testClues = new TestClue[]{
                new TestClue("Some text to test"),
                new TestClue("send message to user with id #42354"),
                new TestClue("thq")
            };

            List<TestCase<TestClue>> result = new ArrayList<>();

            for (int i = 0; i < testClues.length; i++) {
                result.add(new TestCase<TestClue>()
                    .setAttach(testClues[i])
                    .setInput(testClues[i].input));
            }

            return result;
        }

        @Override
        public CheckResult check(String reply, TestClue clue) {
            List<String> splitReply = Arrays.asList(reply.strip().split("\\n"));

            if (splitReply.size() != 4) {
                return new CheckResult(false,
                    "Your program should output 4 lines, found: " + splitReply.size());
            }

            String initialLine = splitReply.get(0);
            String stretched = splitReply.get(1);
            String received = splitReply.get(2);
            String decoded = splitReply.get(3);


            if (!initialLine.equals(clue.input)) {
                return new CheckResult(false,
                    "First line of output should be an input reference!");
            }

            if (!stretched.equals(stretchString(initialLine))) {
                return new CheckResult(false,
                    "Text before sending is encoded incorrectly!");
            }

            if (!decoded.equals(initialLine)) {
                return new CheckResult(false,
                    "Decoding result not match required! Make sure the program works correctly!");
            }

            return checkMatches(received, stretched);
        }

        private static String stretchString(String target) {
            char[] resultChars = target.toCharArray();
            char[] result = new char[resultChars.length * 3];
            for (int i = 0; i < result.length; i++) {
                result[i] = resultChars[i / 3];
            }

            return new String(result);
        }

        private CheckResult checkMatches(String userOutput,
                                         String correctOutput) {

            if (userOutput.length() != correctOutput.length()) {
                return new CheckResult(false,
                    "Input length and output length should be the same!\n" +
                        "Input length: " + correctOutput.length() +
                        "Output length: " + userOutput.length());
            }

            for (int i = 0; i < userOutput.length(); i+=3) {

                int from = i;
                int to = Math.min(i+3, userOutput.length());

                String currUserPart = userOutput.substring(from, to);
                String currCorrectPart = correctOutput.substring(from, to);

                if (currUserPart.length() != 3) {
                    break;
                }

                int errors = 0;

                for (int j = 0; j < currUserPart.length(); j++) {
                    if (currUserPart.charAt(j) != currCorrectPart.charAt(j)) {
                        errors++;
                    }
                }

                if (errors != 1) {
                    return new CheckResult(false,
                        "One of the triples contain "
                            + errors + " errors, but every triple should always contain 1 error");
                }
            }

            return CheckResult.correct();
        }
    }
  learner_created: false
feedback_link: https://hyperskill.org/projects/58/stages/313/implement#comment
status: Solved
record: 2
